//MAX HEAP

#include <stdio.h>
#pragma warning(disable:4996)
int size = 0;
void swap(int* a, int* b)
{
    int temp = *b;
    *b = *a;
    *a = temp;
}
void heapify(int array[], int size, int i)
{
    if (size == 1)
    {
        printf("Single element in the heap");
    }
    else
    {
        int largest = i;
        int l = 2 * i + 1;
        int r = 2 * i + 2;
        if (l < size && array[l] > array[largest])
            largest = l;
        if (r < size && array[r] > array[largest])
            largest = r;
        if (largest != i)
        {
            swap(&array[i], &array[largest]);
            heapify(array, size, largest);
        }
    }
}
void insert(int array[], int newNum)
{
    if (size == 0)
    {
        array[0] = newNum;
        size += 1;
    }
    else
    {
        array[size] = newNum;
        size += 1;
        for (int i = size / 2 - 1; i >= 0; i--)
        {
            heapify(array, size, i);
        }
    }
}
void deleteRoot(int array[])
{
    int i = 0;
    printf("element deleted\n");
    swap(&array[i], &array[size - 1]);
    size -= 1;
    for (int i = size / 2 - 1; i >= 0; i--)
    {
        heapify(array, size, i);
    }
}
void printArray(int array[], int size)
{
    for (int i = 0; i < size; ++i)
        printf("%d ", array[i]);
    printf("\n");
}

int main()
{
    int array[10];
    int x, ch;
    for (;;)
    {
        printf("1.insert\n2.view\n3.delete\n4.exit\nenter choice\n");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("enter element to be inserted: ");
            scanf("%d", &x);
            insert(array, x);
            break;
        case 2:
            if (size == 0)
            {
                printf("no elements in heap\n");
            }
            else {
                printf("elements from min-heap: ");
                printArray(array, size);
            }
            break;
        case 3:
            if (size == 0)
            {
                printf("no elements in heap\n");
            }
            else
                deleteRoot(array);
            break;
        case 4:
            exit(0);
        }
    }
}